!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.flagsmith=e():t.flagsmith=e()}(global,(function(){return(()=>{"use strict";var t={63:t=>{t.exports=function t(e,n){if(e===n)return!0;if(e&&n&&"object"==typeof e&&"object"==typeof n){if(e.constructor!==n.constructor)return!1;var i,a,r;if(Array.isArray(e)){if((i=e.length)!=n.length)return!1;for(a=i;0!=a--;)if(!t(e[a],n[a]))return!1;return!0}if(e.constructor===RegExp)return e.source===n.source&&e.flags===n.flags;if(e.valueOf!==Object.prototype.valueOf)return e.valueOf()===n.valueOf();if(e.toString!==Object.prototype.toString)return e.toString()===n.toString();if((i=(r=Object.keys(e)).length)!==Object.keys(n).length)return!1;for(a=i;0!=a--;)if(!Object.prototype.hasOwnProperty.call(n,r[a]))return!1;for(a=i;0!=a--;){var s=r[a];if(!t(e[s],n[s]))return!1}return!0}return e!=e&&n!=n}},142:function(t,e,n){var i,a,r=this&&this.__assign||function(){return r=Object.assign||function(t){for(var e,n=1,i=arguments.length;n<i;n++)for(var a in e=arguments[n])Object.prototype.hasOwnProperty.call(e,a)&&(t[a]=e[a]);return t},r.apply(this,arguments)},s=this&&this.__spreadArray||function(t,e,n){if(n||2===arguments.length)for(var i,a=0,r=e.length;a<r;a++)!i&&a in e||(i||(i=Array.prototype.slice.call(e,0,a)),i[a]=e[a]);return t.concat(i||Array.prototype.slice.call(e))};Object.defineProperty(e,"__esModule",{value:!0});var l="BULLET_TRAIN_DB",o="BULLET_TRAIN_EVENT",u="https://api.flagsmith.com/api/v1/",g=n(63),c=function(t){return"Attempted to "+t+" a user before calling flagsmith.init. Call flagsmith.init first, if you wish to prevent it sending a request for flags, call init with preventFetch:true."},f=function(){function t(t){var e=this;this.getJSON=function(t,n,a){var r=e,s=r.environmentID,l=r.headers,o={method:n||"GET",body:a,headers:{"x-environment-key":s}};return n&&"GET"!==n&&(o.headers["Content-Type"]="application/json; charset=utf-8"),l&&Object.assign(o.headers,l),i(t,o).then((function(t){return t.text().then((function(e){var n=e;try{n=JSON.parse(e)}catch(t){}return t.ok?n:Promise.reject(n)}))}))},this.getFlags=function(t,n){var i=e,a=i.onChange,s=i.onError,l=i.identity,o=i.api,u=!1,c=function(t,n){var i=t.flags,s=t.traits;e.withTraits=!1;var l={},o={};if(s=s||[],(i=i||[]).forEach((function(t){l[t.feature.name.toLowerCase().replace(/ /g,"_")]={id:t.feature.id,enabled:t.enabled,value:t.feature_state_value}})),s.forEach((function(t){o[t.trait_key.toLowerCase().replace(/ /g,"_")]=t.trait_value})),e.oldFlags=r({},e.flags),n){var u={};n.map((function(t){u[t.name]=t})),e.segments=u}var c=g(e.flags,l),f=g(e.traits,o);e.flags=l,e.traits=o,e.updateStorage(),a&&a(e.oldFlags,{isFromServer:!0,flagsChanged:!c,traitsChanged:!f})};return l?Promise.all([e.withTraits?e.getJSON(o+"identities/","POST",JSON.stringify({identifier:l,traits:Object.keys(e.withTraits).map((function(t){return{trait_key:t,trait_value:e.withTraits[t]}}))})):e.getJSON(o+"identities/?identifier="+encodeURIComponent(l))]).then((function(e){c(e[0],e[1]),t&&!u&&(u=!0,t())})).catch((function(t){var e=t.message;s&&s({message:e})})):Promise.all([e.getJSON(o+"flags/")]).then((function(e){c({flags:e[0]},null),t&&!u&&(u=!0,t())})).catch((function(t){n&&!u&&(u=!0,n(t)),s&&s(t)}))},this.analyticsFlags=function(){var t=e.api;if(0!==Object.getOwnPropertyNames(e.evaluationEvent).length)return e.getJSON(t+"analytics/flags/","POST",JSON.stringify(e.evaluationEvent)).then((function(t){var n=e.getState();e.setState(r(r({},n),{evaluationEvent:{}})),e.updateEventStorage()})).catch((function(t){e.log("Exception fetching evaluationEvent",t)}))},this.analyticsInterval=null,this.api=null,this.cacheFlags=null,this.enableAnalytics=null,this.enableLogs=null,this.environmentID=null,this.evaluationEvent=null,this.flags=null,this.getFlagInterval=null,this.headers=null,this.initialised=null,this.oldFlags=null,this.onChange=null,this.onError=null,this.identity=null,this.segments=null,this.ticks=null,this.timer=null,this.traits=null,this.withTraits=null,this.evaluateFlag=function(t){if(e.enableAnalytics){if(!e.evaluationEvent)return;void 0===e.evaluationEvent[t]&&(e.evaluationEvent[t]=0),e.evaluationEvent[t]+=1}e.updateEventStorage()},this.getValue=function(t){var n=e.flags&&e.flags[t.toLowerCase().replace(/ /g,"_")],i=null;return n&&(i=n.value),e.evaluateFlag(t),i},this.getTrait=function(t){return e.traits&&e.traits[t.toLowerCase().replace(/ /g,"_")]},this.setTrait=function(t,n){var i=e,a=i.getJSON,r=i.identity,s=i.api;if(s){var l={identity:{identifier:r},trait_key:t,trait_value:n};return a("".concat(s,"traits/"),"POST",JSON.stringify(l)).then((function(){e.initialised&&e.getFlags()}))}console.error(c("setTrait"))},this.setTraits=function(t){var n=e,i=n.getJSON,a=n.identity,r=n.api;if(r){t&&"object"==typeof t||console.error("Expected object for flagsmith.setTraits");var s=Object.keys(t).map((function(e){return{identity:{identifier:a},trait_key:e,trait_value:t[e]}}));return i("".concat(r,"traits/bulk/"),"PUT",JSON.stringify(s)).then((function(){e.initialised&&e.getFlags()}))}console.error(c("setTraits"))},this.incrementTrait=function(t,n){var i=e,a=i.getJSON,r=i.identity,s=i.api;return a("".concat(s,"traits/increment-value/"),"POST",JSON.stringify({trait_key:t,increment_by:n,identifier:r})).then(e.getFlags)},this.hasFeature=function(t){var n=e.flags&&e.flags[t.toLowerCase().replace(/ /g,"_")],i=!1;return n&&n.enabled&&(i=!0),e.evaluateFlag(t),i},i=t.fetch?t.fetch:global.fetch,a=t.AsyncStorage}return t.prototype.init=function(t){var e=this,n=t.environmentID,i=t.api,s=void 0===i?u:i,g=t.headers,c=t.onChange,f=t.cacheFlags,h=t.onError,v=t.defaultFlags,p=t.preventFetch,y=t.enableLogs,d=t.enableAnalytics,m=t.AsyncStorage,S=t.state;return new Promise((function(t,i){if(e.environmentID=n,e.api=s,e.headers=g,e.getFlagInterval=null,e.analyticsInterval=null,e.onChange=c,e.onError=h,e.enableLogs=y,e.enableAnalytics=d||!1,e.flags=Object.assign({},v)||{},e.initialised=!0,e.ticks=1e4,e.timer=e.enableLogs?(new Date).valueOf():null,m&&(a=m),e.cacheFlags=void 0!==a&&f,e.setState(S),!n)throw i("Please specify a environment id"),"Please specify a environment id";a.getItem(o).then((function(t){if(t)try{e.evaluationEvent=JSON.parse(t)}catch(t){e.evaluationEvent={}}else e.evaluationEvent={};e.analyticsInterval=setInterval(e.analyticsFlags,e.ticks)})),e.enableAnalytics&&(e.analyticsInterval&&clearInterval(e.analyticsInterval),a.getItem(o,(function(t,n){if(n){var i=JSON.parse(n);i&&(S=e.getState(),e.log("Retrieved events from cache",n),e.setState(r(r({},S),{evaluationEvent:i})))}}))),f?a.getItem(l,(function(n,a){if(a)try{var r=JSON.parse(a);r&&r.api===e.api&&r.environmentID===e.environmentID&&(e.setState(r),e.log("Retrieved flags from cache",r)),e.flags?(e.onChange&&e.onChange(null,{isFromServer:!1}),e.oldFlags=e.flags,t(!0),p||e.getFlags()):p?t(!0):e.getFlags(t,i)}catch(t){e.log("Exception fetching cached logs",t)}else p?(v&&e.onChange(null,{isFromServer:!1}),t(!0)):e.getFlags(t,i)})):p?(v&&e.onChange(null,{isFromServer:!1}),t(!0)):e.getFlags(t,i)})).catch((function(t){return h&&h(t)}))},t.prototype.getAllFlags=function(){return this.flags},t.prototype.identify=function(t,e){return this.identity=t,e&&(this.withTraits=e),this.initialised&&!this.getFlagInterval?this.getFlags():Promise.resolve()},t.prototype.getState=function(){return{api:this.api,environmentID:this.environmentID,flags:this.flags,identity:this.identity,segments:this.segments,traits:this.traits,evaluationEvent:this.evaluationEvent}},t.prototype.setState=function(t){t&&(this.initialised=!0,this.api=t.api||this.api||u,this.environmentID=t.environmentID||this.environmentID,this.flags=t.flags||this.flags,this.identity=t.identity||this.identity,this.segments=t.segments||this.segments,this.traits=t.traits||this.traits,this.evaluationEvent=t.evaluationEvent||this.evaluationEvent)},t.prototype.log=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this.enableLogs&&console.log.apply(this,s(["FLAGSMITH:",(new Date).valueOf()-this.timer,"ms"],t,!0))},t.prototype.updateStorage=function(){if(this.cacheFlags){var t=JSON.stringify(this.getState());this.log("Setting storage",t),a.setItem(l,t)}},t.prototype.updateEventStorage=function(){if(this.enableAnalytics){var t=JSON.stringify(this.getState().evaluationEvent);this.log("Setting event storage",t),a.setItem(o,t)}},t.prototype.logout=function(){return this.identity=null,this.segments=null,this.traits=null,this.initialised&&!this.getFlagInterval?this.getFlags():Promise.resolve()},t.prototype.startListening=function(t){void 0===t&&(t=1e3),this.getFlagInterval&&clearInterval(this.getFlagInterval),this.getFlagInterval=setInterval(this.getFlags,t)},t.prototype.stopListening=function(){clearInterval(this.getFlagInterval),this.getFlagInterval=null},t.prototype.getSegments=function(){},t}();t.exports=function(t){var e=t.fetch,n=t.AsyncStorage;return new f({fetch:e,AsyncStorage:n})}}},e={};function n(i){var a=e[i];if(void 0!==a)return a.exports;var r=e[i]={exports:{}};return t[i].call(r.exports,r,r.exports,n),r.exports}var i={};return(()=>{var t=i;Object.defineProperty(t,"__esModule",{value:!0}),t.createFlagsmithInstance=void 0;var e=n(142);t.default=e({}),t.createFlagsmithInstance=function(){return e({})}})(),i})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,