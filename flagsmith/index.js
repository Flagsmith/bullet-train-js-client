!function(t,e){if("object"==typeof exports&&"object"==typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var n=e();for(var r in n)("object"==typeof exports?exports:t)[r]=n[r]}}(this,(function(){return(()=>{var t={322:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,i=function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,i=!1,o=void 0;try{for(var a,s=t[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{!r&&s.return&&s.return()}finally{if(i)throw o}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")},o=(r=n(378))&&r.__esModule?r:{default:r},a={getItem:function(t,e){return a.multiGet([t]).then((function(t){return t[0][1]})).then((function(t){return e&&e(null,t),t})).catch((function(t){return e&&e(t,null),t}))},setItem:function(t,e,n){return a.multiSet([[t,e]]).then((function(t){return n&&n(null,t),t})).catch((function(t){return n&&n(t,null),t}))},getAllKeys:function(t){return Promise.resolve(Object.keys(localStorage)).then((function(e){return t&&t(null,e),e})).catch((function(e){return t&&t(e,null),e}))},removeItem:function(t,e){return a.multiRemove([t]).then((function(){e&&e(null)})).catch((function(t){e&&e(t,null)}))},clear:function(){return new Promise((function(t){window.localStorage.clear(),t()}))},mergeItem:function(t,e){return a.multiMerge([[t,e]])},multiGet:function(t){return new Promise((function(e){e(t.reduce((function(t,e){return t.concat([[e,localStorage.getItem(e)]])}),[]))}))},multiSet:function(t){return new Promise((function(e,n){var r=[];return t.forEach((function(t){var e=i(t,2),n=e[0],o=e[1];try{localStorage.setItem(n,o)}catch(t){r.push(t)}})),r.length>0?n(r):e()}))},multiMerge:function(t){return new Promise((function(e,n){var r=[];return t.forEach((function(t){var e=i(t,2),n=e[0],a=e[1],s=localStorage.getItem(n);if(s)try{localStorage.setItem(n,JSON.stringify((0,o.default)(JSON.parse(s),JSON.parse(a))))}catch(t){r.push(t)}})),r.length>0?n(r):e()}))},multiRemove:function(t){return new Promise((function(e){t.forEach((function(t){return window.localStorage.removeItem(t)})),e()}))},flushGetRequests:function(){console.warn("AsyncStorage.flushGetRequests: Not supported on `web`")}};e.default=a},63:t=>{"use strict";t.exports=function t(e,n){if(e===n)return!0;if(e&&n&&"object"==typeof e&&"object"==typeof n){if(e.constructor!==n.constructor)return!1;var r,i,o;if(Array.isArray(e)){if((r=e.length)!=n.length)return!1;for(i=r;0!=i--;)if(!t(e[i],n[i]))return!1;return!0}if(e.constructor===RegExp)return e.source===n.source&&e.flags===n.flags;if(e.valueOf!==Object.prototype.valueOf)return e.valueOf()===n.valueOf();if(e.toString!==Object.prototype.toString)return e.toString()===n.toString();if((r=(o=Object.keys(e)).length)!==Object.keys(n).length)return!1;for(i=r;0!=i--;)if(!Object.prototype.hasOwnProperty.call(n,o[i]))return!1;for(i=r;0!=i--;){var a=o[i];if(!t(e[a],n[a]))return!1}return!0}return e!=e&&n!=n}},378:(t,e,n)=>{t=n.nmd(t);var r="__lodash_hash_undefined__",i=9007199254740991,o="[object Arguments]",a="[object Function]",s="[object Object]",u=/^\[object .+?Constructor\]$/,l=/^(?:0|[1-9]\d*)$/,c={};c["[object Float32Array]"]=c["[object Float64Array]"]=c["[object Int8Array]"]=c["[object Int16Array]"]=c["[object Int32Array]"]=c["[object Uint8Array]"]=c["[object Uint8ClampedArray]"]=c["[object Uint16Array]"]=c["[object Uint32Array]"]=!0,c[o]=c["[object Array]"]=c["[object ArrayBuffer]"]=c["[object Boolean]"]=c["[object DataView]"]=c["[object Date]"]=c["[object Error]"]=c[a]=c["[object Map]"]=c["[object Number]"]=c[s]=c["[object RegExp]"]=c["[object Set]"]=c["[object String]"]=c["[object WeakMap]"]=!1;var f="object"==typeof global&&global&&global.Object===Object&&global,h="object"==typeof self&&self&&self.Object===Object&&self,g=f||h||Function("return this")(),v=e&&!e.nodeType&&e,p=v&&t&&!t.nodeType&&t,y=p&&p.exports===v,d=y&&f.process,_=function(){try{return p&&p.require&&p.require("util").types||d&&d.binding&&d.binding("util")}catch(t){}}(),b=_&&_.isTypedArray;function m(t,e,n){switch(n.length){case 0:return t.call(e);case 1:return t.call(e,n[0]);case 2:return t.call(e,n[0],n[1]);case 3:return t.call(e,n[0],n[1],n[2])}return t.apply(e,n)}var S,j,O,w=Array.prototype,I=Function.prototype,F=Object.prototype,A=g["__core-js_shared__"],E=I.toString,P=F.hasOwnProperty,T=(S=/[^.]+$/.exec(A&&A.keys&&A.keys.IE_PROTO||""))?"Symbol(src)_1."+S:"",x=F.toString,N=E.call(Object),C=RegExp("^"+E.call(P).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),L=y?g.Buffer:void 0,J=g.Symbol,k=g.Uint8Array,z=(L&&L.allocUnsafe,j=Object.getPrototypeOf,O=Object,function(t){return j(O(t))}),D=Object.create,R=F.propertyIsEnumerable,M=w.splice,U=J?J.toStringTag:void 0,B=function(){try{var t=ut(Object,"defineProperty");return t({},"",{}),t}catch(t){}}(),G=L?L.isBuffer:void 0,$=Math.max,q=Date.now,H=ut(g,"Map"),V=ut(Object,"create"),Z=function(){function t(){}return function(e){if(!mt(e))return{};if(D)return D(e);t.prototype=e;var n=new t;return t.prototype=void 0,n}}();function K(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function W(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function X(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function Q(t){var e=this.__data__=new W(t);this.size=e.size}function Y(t,e,n){(void 0!==n&&!gt(t[e],n)||void 0===n&&!(e in t))&&nt(t,e,n)}function tt(t,e,n){var r=t[e];P.call(t,e)&&gt(r,n)&&(void 0!==n||e in t)||nt(t,e,n)}function et(t,e){for(var n=t.length;n--;)if(gt(t[n][0],e))return n;return-1}function nt(t,e,n){"__proto__"==e&&B?B(t,e,{configurable:!0,enumerable:!0,value:n,writable:!0}):t[e]=n}K.prototype.clear=function(){this.__data__=V?V(null):{},this.size=0},K.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},K.prototype.get=function(t){var e=this.__data__;if(V){var n=e[t];return n===r?void 0:n}return P.call(e,t)?e[t]:void 0},K.prototype.has=function(t){var e=this.__data__;return V?void 0!==e[t]:P.call(e,t)},K.prototype.set=function(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=V&&void 0===e?r:e,this},W.prototype.clear=function(){this.__data__=[],this.size=0},W.prototype.delete=function(t){var e=this.__data__,n=et(e,t);return!(n<0||(n==e.length-1?e.pop():M.call(e,n,1),--this.size,0))},W.prototype.get=function(t){var e=this.__data__,n=et(e,t);return n<0?void 0:e[n][1]},W.prototype.has=function(t){return et(this.__data__,t)>-1},W.prototype.set=function(t,e){var n=this.__data__,r=et(n,t);return r<0?(++this.size,n.push([t,e])):n[r][1]=e,this},X.prototype.clear=function(){this.size=0,this.__data__={hash:new K,map:new(H||W),string:new K}},X.prototype.delete=function(t){var e=st(this,t).delete(t);return this.size-=e?1:0,e},X.prototype.get=function(t){return st(this,t).get(t)},X.prototype.has=function(t){return st(this,t).has(t)},X.prototype.set=function(t,e){var n=st(this,t),r=n.size;return n.set(t,e),this.size+=n.size==r?0:1,this},Q.prototype.clear=function(){this.__data__=new W,this.size=0},Q.prototype.delete=function(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n},Q.prototype.get=function(t){return this.__data__.get(t)},Q.prototype.has=function(t){return this.__data__.has(t)},Q.prototype.set=function(t,e){var n=this.__data__;if(n instanceof W){var r=n.__data__;if(!H||r.length<199)return r.push([t,e]),this.size=++n.size,this;n=this.__data__=new X(r)}return n.set(t,e),this.size=n.size,this};function rt(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":U&&U in Object(t)?function(t){var e=P.call(t,U),n=t[U];try{t[U]=void 0;var r=!0}catch(t){}var i=x.call(t);return r&&(e?t[U]=n:delete t[U]),i}(t):function(t){return x.call(t)}(t)}function it(t){return St(t)&&rt(t)==o}function ot(t,e,n,r,i){t!==e&&function(t,e,n){for(var r=-1,i=Object(t),o=n(t),a=o.length;a--;){var s=o[++r];if(!1===e(i[s],s,i))break}}(e,(function(o,a){if(i||(i=new Q),mt(o))!function(t,e,n,r,i,o,a){var u=ft(t,n),l=ft(e,n),c=a.get(l);if(c)Y(t,n,c);else{var f,h,g,v,p,y=o?o(u,l,n+"",t,e,a):void 0,d=void 0===y;if(d){var _=pt(l),b=!_&&dt(l),m=!_&&!b&&jt(l);y=l,_||b||m?pt(u)?y=u:St(p=u)&&yt(p)?y=function(t,e){var n=-1,r=t.length;for(e||(e=Array(r));++n<r;)e[n]=t[n];return e}(u):b?(d=!1,y=function(t,e){return t.slice()}(l)):m?(d=!1,v=new(g=(f=l).buffer).constructor(g.byteLength),new k(v).set(new k(g)),h=v,y=new f.constructor(h,f.byteOffset,f.length)):y=[]:function(t){if(!St(t)||rt(t)!=s)return!1;var e=z(t);if(null===e)return!0;var n=P.call(e,"constructor")&&e.constructor;return"function"==typeof n&&n instanceof n&&E.call(n)==N}(l)||vt(l)?(y=u,vt(u)?y=function(t){return function(t,e,n,r){var i=!n;n||(n={});for(var o=-1,a=e.length;++o<a;){var s=e[o],u=void 0;void 0===u&&(u=t[s]),i?nt(n,s,u):tt(n,s,u)}return n}(t,Ot(t))}(u):mt(u)&&!_t(u)||(y=function(t){return"function"!=typeof t.constructor||ct(t)?{}:Z(z(t))}(l))):d=!1}d&&(a.set(l,y),i(y,l,r,o,a),a.delete(l)),Y(t,n,y)}}(t,e,a,n,ot,r,i);else{var u=r?r(ft(t,a),o,a+"",t,e,i):void 0;void 0===u&&(u=o),Y(t,a,u)}}),Ot)}var at=B?function(t,e){return B(t,"toString",{configurable:!0,enumerable:!1,value:(n=e,function(){return n}),writable:!0});var n}:Ft;function st(t,e){var n,r,i=t.__data__;return("string"==(r=typeof(n=e))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?i["string"==typeof e?"string":"hash"]:i.map}function ut(t,e){var n=function(t,e){return null==t?void 0:t[e]}(t,e);return function(t){return!(!mt(t)||function(t){return!!T&&T in t}(t))&&(_t(t)?C:u).test(function(t){if(null!=t){try{return E.call(t)}catch(t){}try{return t+""}catch(t){}}return""}(t))}(n)?n:void 0}function lt(t,e){var n=typeof t;return!!(e=null==e?i:e)&&("number"==n||"symbol"!=n&&l.test(t))&&t>-1&&t%1==0&&t<e}function ct(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||F)}function ft(t,e){if(("constructor"!==e||"function"!=typeof t[e])&&"__proto__"!=e)return t[e]}var ht=function(t){var e=0,n=0;return function(){var r=q(),i=16-(r-n);if(n=r,i>0){if(++e>=800)return arguments[0]}else e=0;return t.apply(void 0,arguments)}}(at);function gt(t,e){return t===e||t!=t&&e!=e}var vt=it(function(){return arguments}())?it:function(t){return St(t)&&P.call(t,"callee")&&!R.call(t,"callee")},pt=Array.isArray;function yt(t){return null!=t&&bt(t.length)&&!_t(t)}var dt=G||function(){return!1};function _t(t){if(!mt(t))return!1;var e=rt(t);return e==a||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}function bt(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=i}function mt(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function St(t){return null!=t&&"object"==typeof t}var jt=b?function(t){return function(e){return t(e)}}(b):function(t){return St(t)&&bt(t.length)&&!!c[rt(t)]};function Ot(t){return yt(t)?function(t,e){var n=pt(t),r=!n&&vt(t),i=!n&&!r&&dt(t),o=!n&&!r&&!i&&jt(t),a=n||r||i||o,s=a?function(t,e){for(var n=-1,r=Array(t);++n<t;)r[n]=e(n);return r}(t.length,String):[],u=s.length;for(var l in t)!e&&!P.call(t,l)||a&&("length"==l||i&&("offset"==l||"parent"==l)||o&&("buffer"==l||"byteLength"==l||"byteOffset"==l)||lt(l,u))||s.push(l);return s}(t,!0):function(t){if(!mt(t))return function(t){var e=[];if(null!=t)for(var n in Object(t))e.push(n);return e}(t);var e=ct(t),n=[];for(var r in t)("constructor"!=r||!e&&P.call(t,r))&&n.push(r);return n}(t)}var wt,It=(wt=function(t,e,n){ot(t,e,n)},function(t,e){return ht(function(t,e,n){return e=$(void 0===e?t.length-1:e,0),function(){for(var r=arguments,i=-1,o=$(r.length-e,0),a=Array(o);++i<o;)a[i]=r[e+i];i=-1;for(var s=Array(e+1);++i<e;)s[i]=r[i];return s[e]=n(a),m(t,this,s)}}(t,e,Ft),t+"")}((function(t,e){var n=-1,r=e.length,i=r>1?e[r-1]:void 0,o=r>2?e[2]:void 0;for(i=wt.length>3&&"function"==typeof i?(r--,i):void 0,o&&function(t,e,n){if(!mt(n))return!1;var r=typeof e;return!!("number"==r?yt(n)&&lt(e,n.length):"string"==r&&e in n)&&gt(n[e],t)}(e[0],e[1],o)&&(i=r<3?void 0:i,r=1),t=Object(t);++n<r;){var a=e[n];a&&wt(t,a,n)}return t})));function Ft(t){return t}t.exports=It},142:function(t,e,n){"use strict";var r,i,o=this&&this.__assign||function(){return o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},o.apply(this,arguments)},a=this&&this.__spreadArray||function(t,e,n){if(n||2===arguments.length)for(var r,i=0,o=e.length;i<o;i++)!r&&i in e||(r||(r=Array.prototype.slice.call(e,0,i)),r[i]=e[i]);return t.concat(r||Array.prototype.slice.call(e))};Object.defineProperty(e,"__esModule",{value:!0});var s="BULLET_TRAIN_DB",u="BULLET_TRAIN_EVENT",l="https://api.flagsmith.com/api/v1/",c=n(63),f=function(t){return"Attempted to "+t+" a user before calling flagsmith.init. Call flagsmith.init first, if you wish to prevent it sending a request for flags, call init with preventFetch:true."},h=function(){function t(t){var e=this;this.getJSON=function(t,n,i){var o=e,a=o.environmentID,s=o.headers,u={method:n||"GET",body:i,headers:{"x-environment-key":a}};return n&&"GET"!==n&&(u.headers["Content-Type"]="application/json; charset=utf-8"),s&&Object.assign(u.headers,s),r(t,u).then((function(t){return t.text().then((function(e){var n=e;try{n=JSON.parse(e)}catch(t){}return t.ok?n:Promise.reject(n)}))}))},this.getFlags=function(t,n){var r=e,i=r.onChange,a=r.onError,s=r.identity,u=r.api,l=!1,f=function(t,n){var r=t.flags,a=t.traits;e.withTraits=!1;var s={},u={};if(a=a||[],(r=r||[]).forEach((function(t){s[t.feature.name.toLowerCase().replace(/ /g,"_")]={id:t.feature.id,enabled:t.enabled,value:t.feature_state_value}})),a.forEach((function(t){u[t.trait_key.toLowerCase().replace(/ /g,"_")]=t.trait_value})),e.oldFlags=o({},e.flags),n){var l={};n.map((function(t){l[t.name]=t})),e.segments=l}var f=c(e.flags,s),h=c(e.traits,u);e.flags=s,e.traits=u,e.updateStorage(),i&&i(e.oldFlags,{isFromServer:!0,flagsChanged:!f,traitsChanged:!h})};return s?Promise.all([e.withTraits?e.getJSON(u+"identities/","POST",JSON.stringify({identifier:s,traits:Object.keys(e.withTraits).map((function(t){return{trait_key:t,trait_value:e.withTraits[t]}}))})):e.getJSON(u+"identities/?identifier="+encodeURIComponent(s))]).then((function(e){f(e[0],e[1]),t&&!l&&(l=!0,t())})).catch((function(t){var e=t.message;a&&a({message:e})})):Promise.all([e.getJSON(u+"flags/")]).then((function(e){f({flags:e[0]},null),t&&!l&&(l=!0,t())})).catch((function(t){n&&!l&&(l=!0,n(t)),a&&a(t)}))},this.analyticsFlags=function(){var t=e.api;if(0!==Object.getOwnPropertyNames(e.evaluationEvent).length)return e.getJSON(t+"analytics/flags/","POST",JSON.stringify(e.evaluationEvent)).then((function(t){var n=e.getState();e.setState(o(o({},n),{evaluationEvent:{}})),e.updateEventStorage()})).catch((function(t){e.log("Exception fetching evaluationEvent",t)}))},this.analyticsInterval=null,this.api=null,this.cacheFlags=null,this.enableAnalytics=null,this.enableLogs=null,this.environmentID=null,this.evaluationEvent=null,this.flags=null,this.getFlagInterval=null,this.headers=null,this.initialised=null,this.oldFlags=null,this.onChange=null,this.onError=null,this.identity=null,this.segments=null,this.ticks=null,this.timer=null,this.traits=null,this.withTraits=null,this.evaluateFlag=function(t){if(e.enableAnalytics){if(!e.evaluationEvent)return;void 0===e.evaluationEvent[t]&&(e.evaluationEvent[t]=0),e.evaluationEvent[t]+=1}e.updateEventStorage()},this.getValue=function(t){var n=e.flags&&e.flags[t.toLowerCase().replace(/ /g,"_")],r=null;return n&&(r=n.value),e.evaluateFlag(t),r},this.getTrait=function(t){return e.traits&&e.traits[t.toLowerCase().replace(/ /g,"_")]},this.setTrait=function(t,n){var r=e,i=r.getJSON,o=r.identity,a=r.api;if(a){var s={identity:{identifier:o},trait_key:t,trait_value:n};return i("".concat(a,"traits/"),"POST",JSON.stringify(s)).then((function(){e.initialised&&e.getFlags()}))}console.error(f("setTrait"))},this.setTraits=function(t){var n=e,r=n.getJSON,i=n.identity,o=n.api;if(o){t&&"object"==typeof t||console.error("Expected object for flagsmith.setTraits");var a=Object.keys(t).map((function(e){return{identity:{identifier:i},trait_key:e,trait_value:t[e]}}));return r("".concat(o,"traits/bulk/"),"PUT",JSON.stringify(a)).then((function(){e.initialised&&e.getFlags()}))}console.error(f("setTraits"))},this.incrementTrait=function(t,n){var r=e,i=r.getJSON,o=r.identity,a=r.api;return i("".concat(a,"traits/increment-value/"),"POST",JSON.stringify({trait_key:t,increment_by:n,identifier:o})).then(e.getFlags)},this.hasFeature=function(t){var n=e.flags&&e.flags[t.toLowerCase().replace(/ /g,"_")],r=!1;return n&&n.enabled&&(r=!0),e.evaluateFlag(t),r},r=t.fetch?t.fetch:global.fetch,i=t.AsyncStorage}return t.prototype.init=function(t){var e=this,n=t.environmentID,r=t.api,a=void 0===r?l:r,c=t.headers,f=t.onChange,h=t.cacheFlags,g=t.onError,v=t.defaultFlags,p=t.preventFetch,y=t.enableLogs,d=t.enableAnalytics,_=t.AsyncStorage,b=t.state;return new Promise((function(t,r){if(e.environmentID=n,e.api=a,e.headers=c,e.getFlagInterval=null,e.analyticsInterval=null,e.onChange=f,e.onError=g,e.enableLogs=y,e.enableAnalytics=d||!1,e.flags=Object.assign({},v)||{},e.initialised=!0,e.ticks=1e4,e.timer=e.enableLogs?(new Date).valueOf():null,_&&(i=_),e.cacheFlags=void 0!==i&&h,e.setState(b),!n)throw r("Please specify a environment id"),"Please specify a environment id";i.getItem(u).then((function(t){if(t)try{e.evaluationEvent=JSON.parse(t)}catch(t){e.evaluationEvent={}}else e.evaluationEvent={};e.analyticsInterval=setInterval(e.analyticsFlags,e.ticks)})),e.enableAnalytics&&(e.analyticsInterval&&clearInterval(e.analyticsInterval),i.getItem(u,(function(t,n){if(n){var r=JSON.parse(n);r&&(b=e.getState(),e.log("Retrieved events from cache",n),e.setState(o(o({},b),{evaluationEvent:r})))}}))),h?i.getItem(s,(function(n,i){if(i)try{var o=JSON.parse(i);o&&o.api===e.api&&o.environmentID===e.environmentID&&(e.setState(o),e.log("Retrieved flags from cache",o)),e.flags?(e.onChange&&e.onChange(null,{isFromServer:!1}),e.oldFlags=e.flags,t(!0),p||e.getFlags()):p?t(!0):e.getFlags(t,r)}catch(t){e.log("Exception fetching cached logs",t)}else p?(v&&e.onChange(null,{isFromServer:!1}),t(!0)):e.getFlags(t,r)})):p?(v&&e.onChange(null,{isFromServer:!1}),t(!0)):e.getFlags(t,r)})).catch((function(t){return g&&g(t)}))},t.prototype.getAllFlags=function(){return this.flags},t.prototype.identify=function(t,e){return this.identity=t,e&&(this.withTraits=e),this.initialised&&!this.getFlagInterval?this.getFlags():Promise.resolve()},t.prototype.getState=function(){return{api:this.api,environmentID:this.environmentID,flags:this.flags,identity:this.identity,segments:this.segments,traits:this.traits,evaluationEvent:this.evaluationEvent}},t.prototype.setState=function(t){t&&(this.initialised=!0,this.api=t.api||this.api||l,this.environmentID=t.environmentID||this.environmentID,this.flags=t.flags||this.flags,this.identity=t.identity||this.identity,this.segments=t.segments||this.segments,this.traits=t.traits||this.traits,this.evaluationEvent=t.evaluationEvent||this.evaluationEvent)},t.prototype.log=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this.enableLogs&&console.log.apply(this,a(["FLAGSMITH:",(new Date).valueOf()-this.timer,"ms"],t,!0))},t.prototype.updateStorage=function(){if(this.cacheFlags){var t=JSON.stringify(this.getState());this.log("Setting storage",t),i.setItem(s,t)}},t.prototype.updateEventStorage=function(){if(this.enableAnalytics){var t=JSON.stringify(this.getState().evaluationEvent);this.log("Setting event storage",t),i.setItem(u,t)}},t.prototype.logout=function(){return this.identity=null,this.segments=null,this.traits=null,this.initialised&&!this.getFlagInterval?this.getFlags():Promise.resolve()},t.prototype.startListening=function(t){void 0===t&&(t=1e3),this.getFlagInterval&&clearInterval(this.getFlagInterval),this.getFlagInterval=setInterval(this.getFlags,t)},t.prototype.stopListening=function(){clearInterval(this.getFlagInterval),this.getFlagInterval=null},t.prototype.getSegments=function(){},t}();t.exports=function(t){var e=t.fetch,n=t.AsyncStorage;return new h({fetch:e,AsyncStorage:n})}},869:(t,e,n)=>{"use strict";function r(t,e){return e=e||{},new Promise((function(n,r){var i=new XMLHttpRequest,o=[],a=[],s={},u=function(){return{ok:2==(i.status/100|0),statusText:i.statusText,status:i.status,url:i.responseURL,text:function(){return Promise.resolve(i.responseText)},json:function(){return Promise.resolve(i.responseText).then(JSON.parse)},blob:function(){return Promise.resolve(new Blob([i.response]))},clone:u,headers:{keys:function(){return o},entries:function(){return a},get:function(t){return s[t.toLowerCase()]},has:function(t){return t.toLowerCase()in s}}}};for(var l in i.open(e.method||"get",t,!0),i.onload=function(){i.getAllResponseHeaders().replace(/^(.*?):[^\S\n]*([\s\S]*?)$/gm,(function(t,e,n){o.push(e=e.toLowerCase()),a.push([e,n]),s[e]=s[e]?s[e]+","+n:n})),n(u())},i.onerror=r,i.withCredentials="include"==e.credentials,e.headers)i.setRequestHeader(l,e.headers[l]);i.send(e.body||null)}))}n.d(e,{Z:()=>r})}},e={};function n(r){var i=e[r];if(void 0!==i)return i.exports;var o=e[r]={id:r,loaded:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.loaded=!0,o.exports}n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.nmd=t=>(t.paths=[],t.children||(t.children=[]),t);var r={};return(()=>{"use strict";var t=r;Object.defineProperty(t,"__esModule",{value:!0}),t.createFlagsmithInstance=void 0;var e=n(869).Z,i=n(322),o=n(142),a=o({AsyncStorage:i.default,fetch:e});"undefined"!=typeof window&&(window.flagsmith=a),t.default=a,t.createFlagsmithInstance=function(){return o({AsyncStorage:i.default,fetch:e})}})(),r})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,