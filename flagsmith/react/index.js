!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("react")):"function"==typeof define&&define.amd?define(["react"],t):"object"==typeof exports?exports.flagsmith=t(require("react")):e.flagsmith=t(e.react)}(global,(function(e){return(()=>{"use strict";var t={798:function(e,t,r){var n=this&&this.__assign||function(){return n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},n.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.FlagsmithProvider=t.FlagsmithContext=void 0;var o=r(156);t.FlagsmithContext=(0,o.createContext)(null);var a=r(73);t.FlagsmithProvider=function(e){var r=e.flagsmith,i=e.options,u=e.serverState,s=e.children;return u&&!r.api&&r.setState(u),(0,o.useEffect)((function(){r.init(n(n({},i),{onChange:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];i.onChange&&i.onChange.apply(i,e),a.default.trigger("event")}}))}),[]),o.default.createElement(t.FlagsmithContext.Provider,{value:r},s)},t.default=t.FlagsmithProvider},545:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(644),t),o(r(408),t),o(r(798),t)},644:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.useFlags=void 0;var n=r(156),o=r(798),a=r(73),i=function(e){var t=(0,n.useRef)(e);return t.current||(t.current=e),t.current},u=function(e){if("string"==typeof e)return[e];if("object"==typeof e&&e.hasOwnProperty("length"))return e;throw new Error("Flagsmith: please supply an array of strings or a single string of flag keys to useFlags")},s=function(e,t,r){return void 0===r&&(r=[]),t.map((function(t){return"".concat(e.getValue(t)).concat(e.hasFeature(t))})).concat(r.map((function(t){return"".concat(e.getTrait(t))}))).join(",")};t.useFlags=function(e,t){var r=i(u(e)),f=i(u(t)),c=(0,n.useContext)(o.FlagsmithContext),l=(0,n.useState)(s(c,r)),h=l[0],p=l[1],g=(0,n.useRef)(h),v=(0,n.useCallback)((function(){var e=s(c,r,f);e!==g.current&&(g.current=e,p(e))}),[]);return(0,n.useEffect)((function(){return a.default.on("event",v),function(){a.default.off("event",v)}}),[]),(0,n.useMemo)((function(){var e={};return r.map((function(t){e[t]={enabled:c.hasFeature(t),value:c.getValue(t)}})),e}),[h])}},408:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.useFlagsmith=void 0;var n=r(156),o=r(798);t.useFlagsmith=function(){var e=(0,n.useContext)(o.FlagsmithContext);if(!e)throw new Error("useFlagsmith must be used with in a FlagsmithProvider");return e}},73:(e,t,r)=>{r.r(t),r.d(t,{default:()=>n});const n=new function e(){for(var t={},r=this,n=0;n<arguments.length;n++){var o=arguments[n];switch(typeof o){case"string":t[o]=[];break;case"object":r=o;break;default:throw new TypeError("Eventjs() only accepts string and object parameters")}}if(r===this&&!(this instanceof e))throw new ReferenceError('Eventjs is not called with "new" keyword and no parameter of type object is passed to it');function a(e){if("string"!=typeof e||!t[e])throw new ReferenceError("The event name does not exist in this event manager: "+e);return!0}return r.on=function(e){a(e);for(var r=1;r<arguments.length;r++){var n=arguments[r];-1===t[e].indexOf(n)&&t[e].push(n)}return this},r.off=function(e){switch(arguments.length){case 0:for(var n in t)t.hasOwnProperty(n)&&r.off(n);break;case 1:a(e),t[e].length=0;break;default:a(e);for(var o=1;o<arguments.length;o++){var i=arguments[o],u=t[e].indexOf(i);-1!==u&&t[e].splice(u,1)}}return this},r.trigger=function(e){a(e);for(var n=[],o=1;o<arguments.length;o++)n.push(arguments[o]);for(var i=t[e],u=[],s=0;s<i.length;s++){var f=i[s];try{f.apply(r,n)}catch(e){u.push({listener:f,error:e})}}if(u.length>0)throw u;return this},r}("event")},156:t=>{t.exports=e}},r={};function n(e){var o=r[e];if(void 0!==o)return o.exports;var a=r[e]={exports:{}};return t[e].call(a.exports,a,a.exports,n),a.exports}return n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n(545)})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,