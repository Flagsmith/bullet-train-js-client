/*! For license information please see index.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("react")):"function"==typeof define&&define.amd?define(["react"],t):"object"==typeof exports?exports.flagsmith=t(require("react")):e.flagsmith=t(e.react)}(global,(function(e){return(()=>{"use strict";var t={418:e=>{var t=Object.getOwnPropertySymbols,r=Object.prototype.hasOwnProperty,n=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},r=0;r<10;r++)t["_"+String.fromCharCode(r)]=r;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var n={};return"abcdefghijklmnopqrst".split("").forEach((function(e){n[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},n)).join("")}catch(e){return!1}}()?Object.assign:function(e,i){for(var a,s,c=o(e),f=1;f<arguments.length;f++){for(var l in a=Object(arguments[f]))r.call(a,l)&&(c[l]=a[l]);if(t){s=t(a);for(var u=0;u<s.length;u++)n.call(a,s[u])&&(c[s[u]]=a[s[u]])}}return c}},321:(e,t,r)=>{if(r(418),r(156),t.Fragment=60107,"function"==typeof Symbol&&Symbol.for){var n=Symbol.for;t.Fragment=n("react.fragment")}t.jsxDEV=void 0},862:(e,t,r)=>{e.exports=r(321)},798:function(e,t,r){var n=this&&this.__assign||function(){return n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},n.apply(this,arguments)},o=this;Object.defineProperty(t,"__esModule",{value:!0}),t.FlagsmithProvider=t.FlagsmithContext=void 0;var i=r(862),a=r(156);t.FlagsmithContext=(0,a.createContext)(null);var s=r(73);t.FlagsmithProvider=function(e){var r=e.flagsmith,c=e.options,f=e.serverState,l=e.children;return f&&!r.api&&r.setState(f),(0,a.useEffect)((function(){r.init(n(n({},c),{onChange:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];c.onChange&&c.onChange.apply(c,e),s.default.trigger("event")}}))}),[]),(0,i.jsxDEV)(t.FlagsmithContext.Provider,n({value:r},{children:l}),void 0,!1,{fileName:"/Users/kylejohnson/flagsmith-js-client/react/FlagsmithProvider.tsx",lineNumber:36,columnNumber:11},o)},t.default=t.FlagsmithProvider},545:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(644),t),o(r(408),t),o(r(798),t)},644:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),r(156),r(798),r(73)},408:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.useFlagsmith=void 0;var n=r(156),o=r(798);t.useFlagsmith=function(){var e=(0,n.useContext)(o.FlagsmithProvider);if(!e)throw new Error("useFlagsmith must be used with in a FlagsmithProvider");return e}},73:(e,t,r)=>{r.r(t),r.d(t,{default:()=>n});const n=new function e(){for(var t={},r=this,n=0;n<arguments.length;n++){var o=arguments[n];switch(typeof o){case"string":t[o]=[];break;case"object":r=o;break;default:throw new TypeError("Eventjs() only accepts string and object parameters")}}if(r===this&&!(this instanceof e))throw new ReferenceError('Eventjs is not called with "new" keyword and no parameter of type object is passed to it');function i(e){if("string"!=typeof e||!t[e])throw new ReferenceError("The event name does not exist in this event manager: "+e);return!0}return r.on=function(e){i(e);for(var r=1;r<arguments.length;r++){var n=arguments[r];-1===t[e].indexOf(n)&&t[e].push(n)}return this},r.off=function(e){switch(arguments.length){case 0:for(var n in t)t.hasOwnProperty(n)&&r.off(n);break;case 1:i(e),t[e].length=0;break;default:i(e);for(var o=1;o<arguments.length;o++){var a=arguments[o],s=t[e].indexOf(a);-1!==s&&t[e].splice(s,1)}}return this},r.trigger=function(e){i(e);for(var n=[],o=1;o<arguments.length;o++)n.push(arguments[o]);for(var a=t[e],s=[],c=0;c<a.length;c++){var f=a[c];try{f.apply(r,n)}catch(e){s.push({listener:f,error:e})}}if(s.length>0)throw s;return this},r}("event")},156:t=>{t.exports=e}},r={};function n(e){var o=r[e];if(void 0!==o)return o.exports;var i=r[e]={exports:{}};return t[e].call(i.exports,i,i.exports,n),i.exports}return n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n(545)})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,